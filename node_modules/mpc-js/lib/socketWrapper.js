"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var NodeSocketWrapper = (function () {
    function NodeSocketWrapper(socketFactory) {
        this.socketFactory = socketFactory;
        this.socketListeners = [];
    }
    NodeSocketWrapper.prototype.connect = function (receive, emit) {
        var _this = this;
        this.socket = this.socketFactory();
        this.socket.setEncoding('utf8');
        var promise = new Promise(function (resolve, reject) {
            _this.deferred = { resolve: resolve, reject: reject };
        });
        this.socketListeners.push(['data', function (msg) {
                if (_this.deferred) {
                    _this.deferred.resolve();
                    _this.deferred = undefined;
                }
                receive(msg);
            }]);
        this.socketListeners.push(['error', function (err) {
                if (_this.deferred) {
                    _this.deferred.reject(err);
                    _this.deferred = undefined;
                }
                if (emit) {
                    emit('socket-error', err);
                }
            }]);
        this.socketListeners.push(['end', function () {
                if (_this.deferred) {
                    _this.deferred.reject(new Error('Socket closed by server'));
                    _this.deferred = undefined;
                }
                if (emit) {
                    emit('socket-end');
                }
            }]);
        this.socketListeners.forEach(function (socketListener) {
            return _this.socket.on(socketListener[0], socketListener[1]);
        });
        return promise;
    };
    NodeSocketWrapper.prototype.send = function (msg) {
        this.socket.write(msg);
    };
    NodeSocketWrapper.prototype.disconnect = function () {
        var _this = this;
        this.socketListeners.forEach(function (socketListener) {
            return _this.socket.removeListener(socketListener[0], socketListener[1]);
        });
        this.socketListeners = [];
        this.socket.end();
        this.socket = undefined;
    };
    return NodeSocketWrapper;
}());
exports.NodeSocketWrapper = NodeSocketWrapper;
//# sourceMappingURL=socketWrapper.js.map