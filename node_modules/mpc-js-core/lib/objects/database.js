"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Base class for objects in the music database.
 */
var DirectoryEntry = (function () {
    function DirectoryEntry() {
    }
    DirectoryEntry.fromValueMap = function (valueMap, withMetadata) {
        if (withMetadata === void 0) { withMetadata = true; }
        if (valueMap.get('file')) {
            if (withMetadata) {
                return new Song(valueMap);
            }
            else {
                return new File(valueMap);
            }
        }
        else if (valueMap.get('directory')) {
            return new Directory(valueMap);
        }
        else if (valueMap.get('playlist')) {
            return new Playlist(valueMap);
        }
    };
    DirectoryEntry.prototype.isFile = function () { return this.entryType === 'file'; };
    DirectoryEntry.prototype.isSong = function () { return this.entryType === 'song'; };
    DirectoryEntry.prototype.isPlaylist = function () { return this.entryType === 'playlist'; };
    DirectoryEntry.prototype.isDirectory = function () { return this.entryType === 'directory'; };
    return DirectoryEntry;
}());
exports.DirectoryEntry = DirectoryEntry;
var File = (function (_super) {
    __extends(File, _super);
    function File(valueMap) {
        var _this = _super.call(this) || this;
        _this.entryType = 'file';
        _this.path = valueMap.get('file');
        _this.lastModified = new Date(valueMap.get('Last-Modified'));
        _this.size = Number(valueMap.get('size'));
        return _this;
    }
    return File;
}(DirectoryEntry));
exports.File = File;
var Song = (function (_super) {
    __extends(Song, _super);
    function Song(valueMap) {
        var _this = _super.call(this) || this;
        _this.entryType = 'song';
        _this.path = valueMap.get('file');
        _this.lastModified = new Date(valueMap.get('Last-Modified'));
        _this.title = valueMap.get('Title');
        _this.name = valueMap.get('Name');
        _this.artist = valueMap.get('Artist');
        _this.artistSort = valueMap.get('ArtistSort');
        _this.composer = valueMap.get('Composer');
        _this.performer = valueMap.get('Performer');
        _this.album = valueMap.get('Album');
        _this.albumSort = valueMap.get('AlbumSort');
        _this.albumArtist = valueMap.get('AlbumArtist');
        _this.albumArtistSort = valueMap.get('AlbumArtistSort');
        _this.track = valueMap.get('Track');
        _this.disc = valueMap.get('Disc');
        _this.date = valueMap.get('Date');
        _this.genre = valueMap.get('Genre');
        _this.comment = valueMap.get('Comment');
        _this.musicBrainzArtistId = valueMap.get('MUSICBRAINZ_ARTISTID');
        _this.musicBrainzAlbumId = valueMap.get('MUSICBRAINZ_ALBUMID');
        _this.musicBrainzAlbumArtistId = valueMap.get('MUSICBRAINZ_ALBUMARTISTID');
        _this.musicBrainzTrackId = valueMap.get('MUSICBRAINZ_TRACKID');
        _this.musicBrainzReleaseTrackId = valueMap.get('MUSICBRAINZ_RELEASETRACKID');
        _this.duration = Number(valueMap.get('Time'));
        return _this;
    }
    return Song;
}(DirectoryEntry));
exports.Song = Song;
var Playlist = (function (_super) {
    __extends(Playlist, _super);
    function Playlist(valueMap) {
        var _this = _super.call(this) || this;
        _this.entryType = 'playlist';
        _this.path = valueMap.get('playlist');
        _this.lastModified = new Date(valueMap.get('Last-Modified'));
        return _this;
    }
    return Playlist;
}(DirectoryEntry));
exports.Playlist = Playlist;
var Directory = (function (_super) {
    __extends(Directory, _super);
    function Directory(valueMap) {
        var _this = _super.call(this) || this;
        _this.entryType = 'directory';
        _this.path = valueMap.get('directory');
        _this.lastModified = new Date(valueMap.get('Last-Modified'));
        return _this;
    }
    return Directory;
}(DirectoryEntry));
exports.Directory = Directory;
var SongCount = (function () {
    function SongCount(valueMap) {
        this.songs = Number(valueMap.get('songs'));
        this.playtime = Number(valueMap.get('playtime'));
    }
    return SongCount;
}());
exports.SongCount = SongCount;
var GroupedSongCount = (function (_super) {
    __extends(GroupedSongCount, _super);
    function GroupedSongCount(valueMap, groupingTag) {
        var _this = _super.call(this, valueMap) || this;
        _this.group = valueMap.get(groupingTag);
        return _this;
    }
    return GroupedSongCount;
}(SongCount));
exports.GroupedSongCount = GroupedSongCount;
//# sourceMappingURL=database.js.map