/**
 * The types of objects in the music database
 */
export declare type DirectoryEntryType = 'file' | 'song' | 'playlist' | 'directory';
/**
 * Base class for objects in the music database.
 */
export declare class DirectoryEntry {
    path: string;
    lastModified: Date;
    entryType: DirectoryEntryType;
    static fromValueMap(valueMap: Map<string, string>, withMetadata?: boolean): DirectoryEntry;
    isFile(): this is File;
    isSong(): this is Song;
    isPlaylist(): this is Playlist;
    isDirectory(): this is Directory;
}
export declare class File extends DirectoryEntry {
    entryType: 'file';
    size: number;
    constructor(valueMap: Map<string, string>);
}
export declare class Song extends DirectoryEntry {
    entryType: 'song';
    title: string;
    name: string;
    artist: string;
    artistSort: string;
    composer: string;
    performer: string;
    album: string;
    albumSort: string;
    albumArtist: string;
    albumArtistSort: string;
    track: string;
    disc: string;
    date: string;
    genre: string;
    comment: string;
    musicBrainzArtistId: string;
    musicBrainzAlbumId: string;
    musicBrainzAlbumArtistId: string;
    musicBrainzTrackId: string;
    musicBrainzReleaseTrackId: string;
    duration: number;
    constructor(valueMap: Map<string, string>);
}
export declare class Playlist extends DirectoryEntry {
    entryType: 'playlist';
    constructor(valueMap: Map<string, string>);
}
export declare class Directory extends DirectoryEntry {
    entryType: 'directory';
    constructor(valueMap: Map<string, string>);
}
export declare class SongCount {
    songs: number;
    playtime: number;
    constructor(valueMap: Map<string, string>);
}
export declare class GroupedSongCount extends SongCount {
    group: string;
    constructor(valueMap: Map<string, string>, groupingTag: string);
}
