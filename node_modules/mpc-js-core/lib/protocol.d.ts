import { EventEmitter } from 'eventemitter3';
import { SocketWrapper } from './socketWrapper';
/**
 * Implements the [general syntax](http://www.musicpd.org/doc/protocol/syntax.html)
 * of the [Music Player Daemon protocol](http://www.musicpd.org/doc/protocol/index.html)
 */
export declare class MPDProtocol extends EventEmitter {
    private static failureRegExp;
    private _connection?;
    private ready;
    private idle;
    private runningRequests;
    private queuedRequests;
    private receivedLines;
    /**
     * The version (major, minor, patch) of the connected daemon
     */
    mpdVersion: [number, number, number];
    readonly isReady: boolean;
    /**
     * Connect to the daemon via the given connection
     */
    protected connect(connection: SocketWrapper): Promise<void>;
    /**
     * Disconnect from the daemon
     */
    disconnect(): void;
    /**
     * Send a command to the daemon. The returned promise will be resolved with an array
     * containing the lines of the daemon's response.
     */
    sendCommand(cmd: string): Promise<string[]>;
    /**
     * Helper function for parsing a response from the daemon into an array of objects
     * @param lines		The daemon response
     * @param markers	Markers are keys denoting the start of a new object within the response
     * @param convert	Converts a key-value Map from the response into the desired target object
     */
    parse<T>(lines: string[], markers: string[], convert: (valueMap: Map<string, string>) => T): T[];
    private enqueueRequest(mpdRequest);
    private processReceivedMessage(msg);
    private dequeueRequests();
    private initialCallback(msg);
    private idleCallback(lines);
}
/**
 * A failure response from the daemon
 */
export interface MPDError {
    errorCode: number;
    errorMessage: string;
}
