import { MPDProtocol } from '../protocol';
import { PlaylistItem, SongIdAndPosition } from '../objects/playlists';
export declare class CurrentPlaylistCommands {
    private protocol;
    constructor(protocol: MPDProtocol);
    /**
     * Adds the file or directory `uri` to the playlist (directories add recursively).
     */
    add(uri: string): Promise<void>;
    /**
     * Adds a song to the playlist (non-recursive) and returns the song id.
     * `uri` is always a single file or URL.
     */
    addId(uri: string, position?: number): Promise<number>;
    /**
     * Clears the current playlist.
     */
    clear(): Promise<void>;
    /**
     * Deletes a song from the playlist.
     */
    delete(position: number): Promise<void>;
    /**
     * Deletes a song range from the playlist.
     */
    deleteRange(start: number, end?: number): Promise<void>;
    /**
     * Deletes the song with the given songid from the playlist.
     */
    deleteId(songId: number): Promise<void>;
    /**
     * Moves the song at `from` to `to` in the playlist.
     */
    move(from: number, to: number): Promise<void>;
    /**
     * Moves the range of songs from `start` to `end` to `to` in the playlist.
     */
    moveRange(start: number, end: number, to: number): Promise<void>;
    /**
     * Moves the song with the given songid to `to` the playlist.
     * If `to` is negative, it is relative to the current song in the playlist (if there is one).
     */
    moveId(songId: number, to: number): Promise<void>;
    /**
     * Finds songs in the current playlist with strict matching.
     */
    playlistFind(tag: string, needle: string): Promise<PlaylistItem[]>;
    /**
     * Searches case-insensitively for partial matches in the current playlist.
     */
    playlistSearch(tag: string, needle: string): Promise<PlaylistItem[]>;
    /**
     * Gets info for the song with the specified songid in the playlist.
     */
    playlistId(songId: number): Promise<PlaylistItem>;
    /**
     * Gets info for all songs or a single song in the playlist.
     */
    playlistInfo(position?: number): Promise<PlaylistItem[]>;
    /**
     * Gets info for a range of songs in the playlist.
     */
    playlistRangeInfo(start: number, end?: number): Promise<PlaylistItem[]>;
    /**
     * Displays changed songs currently in the playlist since `version`. Start and end positions
     * may be given to limit the output to changes in the given range. To detect songs that were
     * deleted at the end of the playlist, use playlistlength returned by status command.
     */
    playlistChanges(version: number, start?: number, end?: number): Promise<PlaylistItem[]>;
    /**
     * Displays changed songs currently in the playlist since `version`. This function only returns
     * the position and the id of the changed song, not the complete metadata. This is more
     * bandwidth efficient. To detect songs that were deleted at the end of the playlist, use
     * playlistlength returned by status command.
     */
    playlistChangesPosId(version: number, start?: number, end?: number): Promise<SongIdAndPosition[]>;
    /**
     * Set the priority of the specified songs. A higher priority means that it will be played
     * first when "random" mode is enabled.
     * A priority is an integer between 0 and 255. The default priority of new songs is 0.
     */
    prio(priority: number, start: number, end: number): Promise<void>;
    /**
     * Same as prio, but address the songs with their songid.
     */
    prioId(priority: number, songId: number): Promise<void>;
    /**
     * Specifies the portion of the song that shall be played. `start` and `end` are offsets
     * in seconds (fractional seconds allowed); both are optional. Omitting both means "remove the
     * range, play everything". A song that is currently playing cannot be manipulated this way.
     */
    rangeId(songId: number, start?: number, end?: number): Promise<void>;
    /**
     * Shuffles the current playlist. `start` and `end` is optional and specifies a range of songs.
     */
    shuffle(start?: number, end?: number): Promise<void>;
    /**
     * Swaps the positions of `song1` and `song2`.
     */
    swap(song1: number, song2: number): Promise<void>;
    /**
     * Swaps the positions of `song1` and `song2` (both songids).
     */
    swapId(song1: number, song2: number): Promise<void>;
    /**
     * Adds a tag to the specified song. Editing song tags is only possible for remote songs.
     * This change is volatile: it may be overwritten by tags received from the server, and the
     * data is gone when the song gets removed from the queue.
     */
    addTagId(songId: number, tag: string, value: string): Promise<void>;
    /**
     * Removes tags from the specified song. If `tag` is not specified, then all tag values will be
     * removed. Editing song tags is only possible for remote songs.
     */
    clearTagId(songId: number, tag?: string): Promise<void>;
}
