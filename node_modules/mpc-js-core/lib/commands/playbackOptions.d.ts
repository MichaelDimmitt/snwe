import { MPDProtocol } from '../protocol';
export declare class PlaybackOptionsCommands {
    private protocol;
    constructor(protocol: MPDProtocol);
    /**
     * Sets volume, the range of volume is 0-100.
     */
    setVolume(volume: number): Promise<void>;
    setRandom(random: boolean): Promise<void>;
    setRepeat(repeat: boolean): Promise<void>;
    /**
     * Sets single state. When single is activated, playback is stopped after current song,
     * or song is repeated if the 'repeat' mode is enabled.
     */
    setSingle(single: boolean): Promise<void>;
    /**
     * Sets consume state. When consume is activated, each song played is removed from playlist.
     */
    setConsume(consume: boolean): Promise<void>;
    /**
     * Sets crossfading between songs
     */
    setCrossfade(seconds: number): Promise<void>;
    /**
     * Sets the threshold at which songs will be overlapped. Like crossfading but doesn't fade the
     * track volume, just overlaps. The songs need to have MixRamp tags added by an external tool.
     * 0dB is the normalized maximum volume so use negative values, I prefer -17dB.
     * In the absence of mixramp tags * crossfading will be used.
     * See [http://sourceforge.net/projects/mixramp]
     */
    setMixrampdb(decibels: number): Promise<void>;
    /**
     * Additional time subtracted from the overlap calculated by mixrampdb.
     * A value of null disables MixRamp overlapping and falls back to crossfading.
     */
    setMixrampDelay(seconds: number): Promise<void>;
    /**
     * Sets the replay gain mode. One of off, track, album, auto.
     * Changing the mode during playback may take several seconds, because the new settings does
     * not affect the buffered data. This command triggers the options idle event.
     */
    setReplayGainMode(mode: 'off' | 'track' | 'album' | 'auto'): Promise<void>;
    getReplayGainMode(): Promise<'off' | 'track' | 'album' | 'auto'>;
}
