"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mount_1 = require("../objects/mount");
var MountCommands = (function () {
    function MountCommands(protocol) {
        this.protocol = protocol;
    }
    /**
     * Mount the specified remote storage `uri` at the given `path`.
     */
    MountCommands.prototype.mount = function (path, uri) {
        var cmd = "mount \"" + path + "\" \"" + uri + "\"";
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    /**
     * Unmounts the specified `path`.
     */
    MountCommands.prototype.unmount = function (path) {
        var cmd = "unmount \"" + path + "\"";
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    /**
     * Queries a list of all mounts. By default, this contains just the configured `music_directory`.
     */
    MountCommands.prototype.listMounts = function () {
        var _this = this;
        return this.protocol.sendCommand('listmounts').then(function (lines) { return _this.protocol.parse(lines, ['mount'], function (valueMap) { return new mount_1.Mount(valueMap); }); });
    };
    /**
     * Queries a list of "neighbors" (e.g. accessible file servers on the local net).
     * Items on that list may be used with `mount()`.
     */
    MountCommands.prototype.listNeighbors = function () {
        var _this = this;
        return this.protocol.sendCommand('listneighbors').then(function (lines) { return _this.protocol.parse(lines, ['neighbor'], function (valueMap) { return new mount_1.Neighbor(valueMap); }); });
    };
    return MountCommands;
}());
exports.MountCommands = MountCommands;
//# sourceMappingURL=mount.js.map