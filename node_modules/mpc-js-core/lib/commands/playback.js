"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var PlaybackCommands = (function () {
    function PlaybackCommands(protocol) {
        this.protocol = protocol;
    }
    /**
     * Begins playing the playlist at song number songPos.
     */
    PlaybackCommands.prototype.play = function (songPos) {
        var cmd = 'play';
        if (typeof songPos === 'number') {
            cmd += " " + songPos;
        }
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    /**
     * Begins playing the playlist at song with the given songid.
     */
    PlaybackCommands.prototype.playId = function (songId) {
        var cmd = 'playid';
        if (typeof songId === 'number') {
            cmd += " " + songId;
        }
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    /**
     * Plays the previous song in the playlist.
     */
    PlaybackCommands.prototype.previous = function () {
        return this.protocol.sendCommand('previous').then(function () { });
    };
    /**
     * Plays the next song in the playlist.
     */
    PlaybackCommands.prototype.next = function () {
        return this.protocol.sendCommand('next').then(function () { });
    };
    /**
     * Seeks to the position time (in seconds; fractions allowed) of entry songPos in the playlist.
     */
    PlaybackCommands.prototype.seek = function (songPos, time) {
        var cmd = "seek " + songPos + " " + time;
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    /**
     * Seeks to the position time (in seconds; fractions allowed) of song with the given songId.
     */
    PlaybackCommands.prototype.seekId = function (songId, time) {
        var cmd = "seekid " + songId + " " + time;
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    /**
     * Seeks to the position time (in seconds; fractions allowed) within the current song.
     * If relative is true, then the time is relative to the current playing position.
     */
    PlaybackCommands.prototype.seekCur = function (time, relative) {
        if (relative === void 0) { relative = false; }
        var cmd;
        if (relative && (time >= 0)) {
            cmd = "seekcur +" + time;
        }
        else {
            cmd = "seekcur " + time;
        }
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    /**
     * Pauses or resumes playback.
     */
    PlaybackCommands.prototype.pause = function (pause) {
        if (pause === void 0) { pause = true; }
        var cmd = "pause " + (pause ? 1 : 0);
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    /**
     * Stops playing.
     */
    PlaybackCommands.prototype.stop = function () {
        return this.protocol.sendCommand('stop').then(function () { });
    };
    return PlaybackCommands;
}());
exports.PlaybackCommands = PlaybackCommands;
//# sourceMappingURL=playback.js.map