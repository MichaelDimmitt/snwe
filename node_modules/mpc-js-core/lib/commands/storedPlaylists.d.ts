import { MPDProtocol } from '../protocol';
import { StoredPlaylist, PlaylistItem } from '../objects/playlists';
export declare class StoredPlaylistsCommands {
    private protocol;
    constructor(protocol: MPDProtocol);
    /**
     * Prints a list of the playlist directory. Each playlist name comes with its last
     * modification time. To avoid problems due to clock differences between clients and the
     * server, clients should not compare this value with their local clock.
     */
    listPlaylists(): Promise<StoredPlaylist[]>;
    /**
     * Lists the songs in the playlist. Playlist plugins are supported.
     */
    listPlaylist(name: string): Promise<string[]>;
    /**
     * Lists the songs with metadata in the playlist. Playlist plugins are supported.
     */
    listPlaylistInfo(name: string): Promise<PlaylistItem[]>;
    /**
     * Loads the playlist into the current queue. Playlist plugins are supported.
     * A range may be specified to load only a part of the playlist.
     */
    load(name: string, start?: number, end?: number): Promise<void>;
    /**
     * Saves the current playlist to `name`.m3u in the playlist directory.
     */
    save(name: string): Promise<void>;
    /**
     * Adds `uri` to the playlist `name`.m3u. `name`.m3u will be created if it does not exist.
     */
    playlistAdd(name: string, uri: string): Promise<void>;
    /**
     * Clears the playlist `name`.m3u.
     */
    playlistClear(name: string): Promise<void>;
    /**
     * Deletes `position` from the playlist `name`.m3u.
     */
    playlistDelete(name: string, position: number): Promise<void>;
    /**
     * Moves the song at position `from` in the playlist `name`.m3u to the position `to`.
     */
    playlistMove(name: string, from: number, to: number): Promise<void>;
    /**
     * Renames the playlist `name`.m3u to `newName`.m3u.
     */
    rename(name: string, newName: string): Promise<void>;
    /**
     * Removes the playlist `name`.m3u from the playlist directory.
     */
    remove(name: string): Promise<void>;
}
