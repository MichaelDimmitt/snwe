"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var StickerCommands = (function () {
    function StickerCommands(protocol) {
        this.protocol = protocol;
    }
    /**
     * Reads a sticker value for the specified object.
     */
    StickerCommands.prototype.getSticker = function (type, uri, name) {
        var cmd = "sticker get " + type + " \"" + uri + "\" \"" + name + "\"";
        return this.protocol.sendCommand(cmd).then(function (lines) { return lines[0].substring(name.length + 10); });
    };
    /**
     * Adds a sticker value to the specified object.
     * If a sticker item with that name already exists, it is replaced.
     */
    StickerCommands.prototype.setSticker = function (type, uri, name, value) {
        var cmd = "sticker set " + type + " \"" + uri + "\" \"" + name + "\" \"" + value + "\"";
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    /**
     * Deletes a sticker value from the specified object.
     * If you do not specify a sticker name, all sticker values are deleted.
     */
    StickerCommands.prototype.deleteSticker = function (type, uri, name) {
        var cmd = "sticker delete " + type + " \"" + uri + "\"";
        if (name) {
            cmd += " \"" + name + "\"";
        }
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    /**
     * Lists the stickers for the specified object.
     * Returns a Map with sticker names as keys.
     */
    StickerCommands.prototype.listStickers = function (type, uri) {
        var cmd = "sticker list " + type + " \"" + uri + "\"";
        return this.protocol.sendCommand(cmd).then(function (lines) {
            var stickerMap = new Map();
            lines.forEach(function (line) {
                var separatorIndex = line.indexOf('=');
                stickerMap.set(line.substring(9, separatorIndex), line.substring(separatorIndex + 1));
            });
            return stickerMap;
        });
    };
    /**
     * Searches the sticker database for stickers with the specified name,
     * below the specified directory (`uri`).
     * Returns a Map with the URIs of the matching songs as keys.
     */
    StickerCommands.prototype.findStickers = function (type, uri, name, value, operator) {
        var _this = this;
        if (operator === void 0) { operator = '='; }
        var cmd = "sticker find " + type + " \"" + uri + "\" \"" + name + "\"";
        if (value) {
            cmd += " " + operator + " \"" + value + "\"";
        }
        return this.protocol.sendCommand(cmd).then(function (lines) { return _this.protocol.parse(lines, ['file'], function (valueMap) { return valueMap; }); }).then(function (fileAndStickers) {
            var stickerMap = new Map();
            fileAndStickers.forEach(function (fileAndSticker) {
                var stickerValue = fileAndSticker.get('sticker').substring(name.length + 1);
                stickerMap.set(fileAndSticker.get('file'), stickerValue);
            });
            return stickerMap;
        });
    };
    return StickerCommands;
}());
exports.StickerCommands = StickerCommands;
//# sourceMappingURL=sticker.js.map