"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ClientToClientCommands = (function () {
    function ClientToClientCommands(protocol) {
        this.protocol = protocol;
    }
    /**
     * Subscribe to a channel. The channel is created if it does not exist already.
     * The name may consist of alphanumeric ASCII characters plus underscore, dash, dot and colon.
     */
    ClientToClientCommands.prototype.subscribe = function (channel) {
        var cmd = "subscribe " + channel;
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    /**
     * Unsubscribe from a channel.
     */
    ClientToClientCommands.prototype.unsubscribe = function (channel) {
        var cmd = "unsubscribe " + channel;
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    /**
     * Obtain a list of all channels.
     */
    ClientToClientCommands.prototype.channels = function () {
        return this.protocol.sendCommand('channels').then(function (lines) { return lines.map(function (line) { return line.substring(9); }); });
    };
    /**
     * Reads messages for this client. Returns a Map containing the messages grouped by channel name.
     */
    ClientToClientCommands.prototype.readMessages = function () {
        return this.protocol.sendCommand('readmessages').then(function (lines) {
            var messagesPerChannel = new Map();
            for (var i = 0; i < lines.length; i += 2) {
                var channel = lines[i].substring(9);
                var message = lines[i + 1].substring(9);
                if (!messagesPerChannel.has(channel)) {
                    messagesPerChannel.set(channel, []);
                }
                messagesPerChannel.get(channel).push(message);
            }
            return messagesPerChannel;
        });
    };
    /**
     * Send a message to the specified channel.
     */
    ClientToClientCommands.prototype.sendMessage = function (channel, text) {
        var cmd = "sendmessage " + channel + " \"" + text + "\"";
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    return ClientToClientCommands;
}());
exports.ClientToClientCommands = ClientToClientCommands;
//# sourceMappingURL=clientToClient.js.map