"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var playlists_1 = require("../objects/playlists");
var StoredPlaylistsCommands = (function () {
    function StoredPlaylistsCommands(protocol) {
        this.protocol = protocol;
    }
    /**
     * Prints a list of the playlist directory. Each playlist name comes with its last
     * modification time. To avoid problems due to clock differences between clients and the
     * server, clients should not compare this value with their local clock.
     */
    StoredPlaylistsCommands.prototype.listPlaylists = function () {
        var _this = this;
        return this.protocol.sendCommand('listplaylists').then(function (lines) { return _this.protocol.parse(lines, ['playlist'], function (valueMap) { return new playlists_1.StoredPlaylist(valueMap); }); });
    };
    /**
     * Lists the songs in the playlist. Playlist plugins are supported.
     */
    StoredPlaylistsCommands.prototype.listPlaylist = function (name) {
        var cmd = "listplaylist \"" + name + "\"";
        return this.protocol.sendCommand(cmd).then(function (lines) { return lines.map(function (line) { return line.substring(6); }); });
    };
    /**
     * Lists the songs with metadata in the playlist. Playlist plugins are supported.
     */
    StoredPlaylistsCommands.prototype.listPlaylistInfo = function (name) {
        var _this = this;
        var cmd = "listplaylistinfo \"" + name + "\"";
        return this.protocol.sendCommand(cmd).then(function (lines) { return _this.protocol.parse(lines, ['file'], function (valueMap) { return new playlists_1.PlaylistItem(valueMap); }); });
    };
    /**
     * Loads the playlist into the current queue. Playlist plugins are supported.
     * A range may be specified to load only a part of the playlist.
     */
    StoredPlaylistsCommands.prototype.load = function (name, start, end) {
        var cmd = "load \"" + name + "\"";
        if (typeof start === 'number') {
            cmd += " " + start + ":";
            if (typeof end === 'number') {
                cmd += end;
            }
        }
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    /**
     * Saves the current playlist to `name`.m3u in the playlist directory.
     */
    StoredPlaylistsCommands.prototype.save = function (name) {
        var cmd = "save \"" + name + "\"";
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    /**
     * Adds `uri` to the playlist `name`.m3u. `name`.m3u will be created if it does not exist.
     */
    StoredPlaylistsCommands.prototype.playlistAdd = function (name, uri) {
        var cmd = "playlistadd \"" + name + "\" \"" + uri + "\"";
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    /**
     * Clears the playlist `name`.m3u.
     */
    StoredPlaylistsCommands.prototype.playlistClear = function (name) {
        var cmd = "playlistclear \"" + name + "\"";
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    /**
     * Deletes `position` from the playlist `name`.m3u.
     */
    StoredPlaylistsCommands.prototype.playlistDelete = function (name, position) {
        var cmd = "playlistdelete \"" + name + "\" " + position;
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    /**
     * Moves the song at position `from` in the playlist `name`.m3u to the position `to`.
     */
    StoredPlaylistsCommands.prototype.playlistMove = function (name, from, to) {
        var cmd = "playlistmove \"" + name + "\" " + from + " " + to;
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    /**
     * Renames the playlist `name`.m3u to `newName`.m3u.
     */
    StoredPlaylistsCommands.prototype.rename = function (name, newName) {
        var cmd = "rename \"" + name + "\" \"" + newName + "\"";
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    /**
     * Removes the playlist `name`.m3u from the playlist directory.
     */
    StoredPlaylistsCommands.prototype.remove = function (name) {
        var cmd = "rm \"" + name + "\"";
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    return StoredPlaylistsCommands;
}());
exports.StoredPlaylistsCommands = StoredPlaylistsCommands;
//# sourceMappingURL=storedPlaylists.js.map