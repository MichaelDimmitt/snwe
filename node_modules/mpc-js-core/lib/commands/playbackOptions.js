"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var PlaybackOptionsCommands = (function () {
    function PlaybackOptionsCommands(protocol) {
        this.protocol = protocol;
    }
    /**
     * Sets volume, the range of volume is 0-100.
     */
    PlaybackOptionsCommands.prototype.setVolume = function (volume) {
        var cmd = "setvol " + volume;
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    PlaybackOptionsCommands.prototype.setRandom = function (random) {
        var cmd = "random " + (random ? 1 : 0);
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    PlaybackOptionsCommands.prototype.setRepeat = function (repeat) {
        var cmd = "repeat " + (repeat ? 1 : 0);
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    /**
     * Sets single state. When single is activated, playback is stopped after current song,
     * or song is repeated if the 'repeat' mode is enabled.
     */
    PlaybackOptionsCommands.prototype.setSingle = function (single) {
        var cmd = "single " + (single ? 1 : 0);
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    /**
     * Sets consume state. When consume is activated, each song played is removed from playlist.
     */
    PlaybackOptionsCommands.prototype.setConsume = function (consume) {
        var cmd = "consume " + (consume ? 1 : 0);
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    /**
     * Sets crossfading between songs
     */
    PlaybackOptionsCommands.prototype.setCrossfade = function (seconds) {
        var cmd = "crossfade " + seconds;
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    /**
     * Sets the threshold at which songs will be overlapped. Like crossfading but doesn't fade the
     * track volume, just overlaps. The songs need to have MixRamp tags added by an external tool.
     * 0dB is the normalized maximum volume so use negative values, I prefer -17dB.
     * In the absence of mixramp tags * crossfading will be used.
     * See [http://sourceforge.net/projects/mixramp]
     */
    PlaybackOptionsCommands.prototype.setMixrampdb = function (decibels) {
        var cmd = "mixrampdb " + decibels;
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    /**
     * Additional time subtracted from the overlap calculated by mixrampdb.
     * A value of null disables MixRamp overlapping and falls back to crossfading.
     */
    PlaybackOptionsCommands.prototype.setMixrampDelay = function (seconds) {
        var cmd = "mixrampdelay " + (seconds ? seconds : 'nan');
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    /**
     * Sets the replay gain mode. One of off, track, album, auto.
     * Changing the mode during playback may take several seconds, because the new settings does
     * not affect the buffered data. This command triggers the options idle event.
     */
    PlaybackOptionsCommands.prototype.setReplayGainMode = function (mode) {
        var cmd = "replay_gain_mode " + mode;
        return this.protocol.sendCommand(cmd).then(function () { });
    };
    PlaybackOptionsCommands.prototype.getReplayGainMode = function () {
        return this.protocol.sendCommand('replay_gain_status').then(function (lines) { return lines[0].substring(18); });
    };
    return PlaybackOptionsCommands;
}());
exports.PlaybackOptionsCommands = PlaybackOptionsCommands;
//# sourceMappingURL=playbackOptions.js.map